# StealthFlow Server Configuration

events {
    worker_connections 1024;
}

stream {
    # SNI mapping to appropriate backend
    map $ssl_preread_server_name $backend {
        # CDN domains for Trojan
        cdn1.yourdomain.com     127.0.0.1:8443;
        cdn2.yourdomain.com     127.0.0.1:8443;
        cdn3.yourdomain.com     127.0.0.1:8443;
        
        # Default values for REALITY        default                 127.0.0.1:443;
    }

    # Main server that receives all TLS traffic
    server {
        listen 443;
        listen [::]:443;
        proxy_pass $backend;
        ssl_preread on;
        proxy_protocol off;
        proxy_timeout 10s;
        proxy_responses 1;
        error_log /var/log/nginx/stream_error.log;
    }

    # Logs
    error_log /var/log/nginx/stream.log;
    access_log /var/log/nginx/stream_access.log;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Security settings
    server_tokens off;
    add_header X-Frame-Options DENY;
    add_header X-Content-Type-Options nosniff;
    add_header X-XSS-Protection "1; mode=block";

    # Log format
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                   '$status $body_bytes_sent "$http_referer" '
                   '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log;

    # Web server for fallback and management
    server {
        listen 80;
        listen [::]:80;
        server_name cdn1.yourdomain.com cdn2.yourdomain.com cdn3.yourdomain.com;
        
        # Redirect all HTTP to HTTPS
        return 301 https://$server_name$request_uri;
    }

    # Fallback server for non-VPN requests
    server {
        listen 8080;
        listen [::]:8080;
        server_name _;
        
        root /var/www/html;
        index index.html index.nginx-debian.html;

        location / {
            try_files $uri $uri/ =404;
        }

        # Simple page to hide server nature
        location = / {
            return 200 "Welcome to nginx!";
            add_header Content-Type text/plain;
        }
    }

    # API endpoint for health check
    server {
        listen 127.0.0.1:9000;
        server_name localhost;
        
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
        
        location /stats {
            access_log off;
            proxy_pass http://127.0.0.1:10085;
        }
    }
}
